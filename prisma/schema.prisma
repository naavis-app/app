generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id
  createdAt   DateTime  @default(now())
  password    String?
  username    String    @unique
  firstname   String?
  lastname    String?
  email       String?   @unique
  github_id   Int?      @unique
  profile_pic String?   @unique
  devices     Device[]  @relation("UserDevices")
  ownedGroups Group[]   @relation("GroupOwner")
  sessions    Session[] @relation("UserSessions")
  groups      Group[]   @relation("GroupMembers")
}

model Session {
  id        String   @id
  createdAt DateTime @default(now())
  expiresAt DateTime
  userId    String
  user      User     @relation("UserSessions", fields: [userId], references: [id])
}

model Device {
  id                 String   @id @default(uuid())
  name               String
  type               String
  latitude           Float    @default(0)
  longitude          Float    @default(0)
  speed              Float    @default(0)
  lastLocationUpdate DateTime @default(now())
  connection         String   @default("Online")
	
  userId             String
  user               User     @relation("UserDevices", fields: [userId], references: [id])
}

model Group {
  id          String  @id @default(uuid())
  name        String
  description String?
  ownerId     String

  personalGroup Boolean @default(false)
  inviteCode    String? @unique

  owner   User    @relation("GroupOwner", fields: [ownerId], references: [id])
  places  Place[] @relation("GroupPlaces")
  members User[]  @relation("GroupMembers")
}

model Place {
  id          String  @id @default(uuid())
  name        String
  latitude    Float   @default(0)
  longitude   Float   @default(0)
  address     String?
  alertRadius Float   @default(5)
  onEntry     Boolean @default(false)
  onExit      Boolean @default(false)

  groupId     String
  parentGroup Group   @relation("GroupPlaces", fields: [groupId], references: [id])
}
